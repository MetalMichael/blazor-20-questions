@page "/game/{Id:guid}"
@using System.Net.Http
@using Newtonsoft.Json
@using Blazor20Questions.Shared
@inject HttpClient Http

<h1>20 Questions Game</h1>

@if (_error)
{
    <div class="error">
        Error loading game: @_errorMessage
    </div>
}
else if (_game != null)
{
    <Rules game="@_game" />

    if (_game.Complete)
    {
        if (_game.Won)
        {
            <div class="success">You Won! The correct answer was: @_game.Subject!</div>
        }
        else
        {
            <div class="fail">You Lost. The correct answer was: @_game.Subject</div>
        }
    }
    else
    {
        <div class="game">
            <h2>Asked questions</h2>
            <div class="questions">
                @foreach (var question in _game.Questions)
                {
                    <div class="question">
                        <span class="question-text">@question.Question</span>
                        <span class="question-answer">@(question.HasAnswer ? (question.Answer.Value) ? "Yes" : "No" : "(unanswered)")</span>
                    </div>
                }
            </div>

            <div class="remaining">Remaining Questions: @_game.QuestionsRemaining</div>

            @if (_game.QuestionsRemaining > 0)
            {
                <h2>Ask a Question...</h2>
                <form onsubmit="@AskQuestion">
                    <div class="simple-form">
                        <div class="form-group">
                            <label>
                                Type an yes/no question below
                                <input type="text" bind="@Question" class="form-control" id="first-name" placeholder="Is it a...?" />
                            </label>
                        </div>
                    </div>
                </form>
            }

            @if (!_game.GuessesCountAsQuestions || _game.QuestionsRemaining > 0)
            {
                <h2>Make a guess</h2>
                @if (_game.GuessesCountAsQuestions)
                {
                    <span>Each guess counts as a question, so be sure not to waste an oppertunity!</span>
                }
                else
                {
                    <span>Guesses are free, and do not count as questions. Guess away!</span>
                }
                <form onsubmit="@MakeGuess">
                    <div class="simple-form">
                        <div class="form-group">
                            <label>
                                Guess the Subject
                                <input type="text" bind="@Guess" class="form-control" id="first-name" placeholder="house" />
                            </label>
                        </div>
                    </div>
                </form>
            }
        </div>
    }
}
else
{
    <div>Loading...</div>
}

@functions {

    [Parameter]
    public Guid Id { get; set; }

    private string Question { get; set; }
    private string Guess { get; set; }

    private GameResponse _game;
    private bool _error;
    private string _errorMessage;

    protected override async Task OnInitAsync()
    {
        try
        {
            _error = false;
            _game = await Http.GetJsonAsync<GameResponse>($"api/Game/{Id}");
        }
        catch (Exception e)
        {
            _error = true;
            _errorMessage = e.Message;
        }
    }

    private async Task AskQuestion()
    {
        try
        {
            var res = await Http.PostAsync($"api/Game/{Id}/ask", new StringContent(Question));

            res.EnsureSuccessStatusCode();

            var content = await res.Content.ReadAsStringAsync();
            _game = JsonConvert.DeserializeObject<GameResponse>(content);

        }
        catch (Exception e)
        {
            _error = true;
            _errorMessage = e.Message;
        }
    }

    private async Task MakeGuess()
    {
        try
        {
            var res = await Http.PostAsync($"api/Game/{Id}/guess", new StringContent(Guess));

            res.EnsureSuccessStatusCode();

            var content = await res.Content.ReadAsStringAsync();
            _game = JsonConvert.DeserializeObject<GameResponse>(content);
        }
        catch (Exception e)
        {
            _error = true;
            _errorMessage = e.Message;
        }
    }
}
